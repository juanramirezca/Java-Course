The map collection does not implement the Collection interface.
This data structure is used to store key-value pairs. 

6.1 Map implementation. 

There are four main implementations for the map:

6.1.1 HashMap
In the HashMap implementation the elements are stored unsorted and unoredered. 
Allows a key with null value.


6.1.2 HashTable
The HashTable is similar to HashMap, but this implementation is Synchronized, which means it is Thread safe. 
Does not allow key with null values.

6.1.3 LinkedHashMap
The insertion order is maintained, but the insertion and deletion is slower. However, the iteration is faster.

6.1.4 TreeMap
The data is stored in a sorted order and implements a NavigableMap.


6.2 Creation of a Map

Map <String, Integer> map = Map.of("A", 3, "B", 5, "C", 10);

6.3 Useful methods

6.3.1 get() method
We can get the value of a specific key using this method. It returns null for a key that does not exist.

map.get("C")
map.get("Z")

6.3.2 keySet()
Returns the a set of all the keys in the map.

map.keySet()

6.3.2 values()
Returns the a set of all the values in the map.

map.keySet()

Other usefull methods are the following:
size(), isEmpty(), ContainsKey(), containsValue()

6.4 Useful methods in Treemap
There are some useful methods in the Treemap that make it different. For this part, we will create a Treemap with some examples.

TreeMap<String,Integer> treemap = new TreeMap<>();

treemap.put("F", 25);
treemap.put("Z", 5);
treemap.put("L", 250);
treemap.put("A", 15);

6.4.1 higherKey()
This method returns the following Key ordered in a sorted way. 

Example
treemap.higherKey("B");

6.4.2 ceilingKey()
This method returns the next Key ordered in a sorted way, but taking into account the given parameter 

Example
treemap.ceilingKey("B");

6.4.3 lowerKey()
This method returns the previus Key ordered in a sorted way. 

Example
treemap.higherKey("B");

6.4.4 floorKey()
This method returns the previous or equal Key ordered in a sorted way

Example
treemap.ceilingKey("B");

6.4.5 firstEntry() 
Returns the first element in the Treemap

Example
treemap.firstEntry()

6.4.6 lastEntry() 
Returns the first element in the Treemap

Example
treemap.lastEntry()

6.4.7 subMap()
Given two parameters, we can create a subtree considering these parameters.
treemap.subMap("C", "Y")


Exercise. 
Given a string, determine how many times a character appears in the string, and how many times a word appear in that string.

















